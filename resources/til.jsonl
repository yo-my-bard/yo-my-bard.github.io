{"date": "2019-09-18", "title": "Command line localhost setup", "body": "While working on my static .dev site, I learned that I can mimic a local server that more complex frameworks like Flask or Django use, by switching to the directory and running python -m http.server. Other languages have similar variants. Good examples here: https://stackoverflow.com/a/21608670.", "tags": ["python", "cli", "webdev"]}
{"date": "2019-09-18", "title": "Templating workaround for static sites", "body": "Jinja2 framework has been really cool to use for templating across different web pages. By using, jQuery and .load() on DOM elements, I can achieve similar results. https://api.jquery.com/load/.", "tags": ["webdev", "javascript"]}
{"date": "2019-09-18", "title": "Preview new commits before git pull", "body": "When I git fetch and see there have been commits, I'd like to get a sense of what they are before git pull. I learned I can use git log remote/branchname. Common e.g. git log origin/master. See: https://stackoverflow.com/a/180368/12089420.", "tags": ["git"]}
{"date": "2019-09-18", "title": "git diff and git log with dot notation", "body": "Dot notation (.. or ...) denotes range of commit references and is inclusive. Most cases you want to use git log --oneline --left-right A...B which shows all commits that are NOT shared between A and B. Use git diff A..B which shows all commits in B that have happened since A and B's common merge-base/ancestor/where they diverged. See: https://stackoverflow.com/a/24186641/12089420.", "tags": ["git"]}
{"date": "2019-09-18", "title": "git merge vs. git rebase", "body": "Because I work solo on repositories, I rarely run into commit history issues. I worked on on a feature and came with a thought for another feature. I created a branch based on the original feature branch and after a pull request noticed that both branches were missing commits from origin/master. The first feature would be mostly fine for merging (though ideally I should have rebased to the master branch before pull requesting). The second feature would be in an awkward spot. That's when I realized I might want to rebase which would have been the best move if I hadn't already pushed the second feature branch to remote with a commit. I rebased and my histories diverged. Got back to prior to the rebase by using git reflog. Read that because of that one remote commit the best approach was now to git merge origin/master, not to try to rebase. https://www.atlassian.com/git/tutorials/merging-vs-rebasing.", "tags": ["git"]}
{"date": "2019-09-22", "title": "Anatomy of Bootstrap card components", "body": "I tried to understand how to get cards to display the way I imagined. Learned how Bootstrap uses classes to get this done: card-columns/card-deck -> card -> card-header -> card-body -> card-title/card-text -> card-footer.", "tags": ["webdev"]}
{"date": "2019-09-22", "title": "Reading in files with jQuery", "body": "Read a simple .jsonl file with jQuery.get(file, callback) and parsed the file in the callback. Deliberately structured my .jsonl file to make parsing painless.", "tags": ["javascript"]}
{"date": "2019-10-03", "title": "git merging through conflicts", "body": "Had run into a merge conflict while trying to update my local repo. For the most part, I wanted everything from remote but if there were any merge conflicts I wanted to not have my local work deleted. `git merge -s recursive -X ours` does the trick.", "tags": ["git"]}
{"date": "2020-01-04", "title": "Adding virtual environment to Jupyter kernel options", "body": "I had two recent run-ins with wanting to have a virtual environment available in the list of kernels in Jupyter notebook. Depending on the use case, one of the arguments for `ipykernel install` should help. To read the options, `python -m ipykernel install -h`. Prefix is the most general and can be used to install different environments in different locations. Often what I want is sys-prefix and is usually the default environment available after installing and starting up Jupyter within a virtual environment. I don't want kernels to be available globally, particularly because environment names have to be unique. See here for more: https://ipython.readthedocs.io/en/stable/install/kernel_install.html", "tags": ["cli"]}