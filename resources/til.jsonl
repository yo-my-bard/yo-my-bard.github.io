{'date': '2019-09-18', 'title': 'Command line localhost setup', 'body': 'While working on my static .dev site, I learned that I can mimic a local server that more complex frameworks like Flask or Django use, by switching to the directory and running python -m http.server. Other languages have similar variants. Good examples here: https://stackoverflow.com/a/21608670.', 'tags': ['python', 'cli', 'webdev']}
{'date': '2019-09-18', 'title': 'Templating workaround for static sites', 'body': 'Jinja2 framework has been really cool to use for templating across different web pages. By using, jQuery and .load() on DOM elements, I can achieve similar results. https://api.jquery.com/load/.', 'tags': ['webdev', 'javascript']}
{'date': '2019-09-18', 'title': 'Preview new commits before git pull', 'body': 'When I git fetch and see there have been commits, I'd like to get a sense of what they are before git pull. I learned I can use git log remote/branchname. Common e.g. git log origin/master. See: https://stackoverflow.com/a/180368/12089420.', 'tags': ['git', 'cli']}
{'date': '2019-09-18', 'title': 'git diff and git log with dot notation', 'body': 'Dot notation (.. or ...) denotes range of commit references and is inclusive. Most cases you want to use git log --oneline --left-right A...B which shows all commits that are NOT shared between A and B. Use git diff A..B which shows all commits in B that have happened since A and B's common merge-base/ancestor/where they diverged. See: https://stackoverflow.com/a/24186641/12089420.', 'tags': ['git', 'cli']}
{'date': '2019-09-18', 'title': 'git merge vs. git rebase', 'body': 'Because I work solo on repositories, I rarely run into commit history issues. I worked on on a feature and came with a thought for another feature. I created a branch based on the original feature branch and after a pull request noticed that both branches were missing commits from origin/master. The first feature would be mostly fine for merging (though ideally I should have rebased to the master branch before pull requesting). The second feature would be in an awkward spot. That's when I realized I might want to rebase which would have been the best move if I hadn't already pushed the second feature branch to remote with a commit. I rebased and my histories diverged. Got back to prior to the rebase by using git reflog. Read that because of that one remote commit the best approach was now to git merge origin/master, not to try to rebase. https://www.atlassian.com/git/tutorials/merging-vs-rebasing.', 'tags': ['git', 'cli']}
